Главный модуль программы для шифрования:
#include <iostream>
#include <cctype>
#include "Cipher.h"
using namespace std;
bool isValid(int key,const string& s )
{
	for (auto c:s)
		if (!isalpha(c))
			return false;
	if (key > s.size())
		return false;
	return true;
}
int main()
{
	
	int key;
	string text;
	unsigned op;
	do {
		cout<<"Input operation (0-exit, 1-encrypt, 2-decrypt): ";
		cin>>op;
		if (op > 2)
			cout<<"Illegal operation\n";
		else if (op > 0) {
			cout<<"Input text: ";
			cin>>text;
			cout<<"Input key: ";
			cin>>key;
			if (!isValid(key, text)) {
				cerr<<"Error!\n";
			} else {
				Cipher cipher(key, text);
				if (op==1) {
					cout<<"Encrypted text: "<<cipher.encrypt(text)<<endl;
				} else {
					cout<<"Decrypted text: "<<cipher.decrypt(text)<<endl;
				}
			}
		}
	} while (op != 0);
	return 0;
}
Заголовочный файл модуля 'шифратора':
#pragma once
#include <string>
using namespace std;
class Cipher
{
	char** value;
	int S, D;
public:
	Cipher() = delete;
	Cipher(int key, const string& s);
	string encrypt(const string& open_text);
	string decrypt(const string& cipher_text);
	~Cipher();
};

Модифицированный модуль "шифратора":
#include "Cipher.h"
Cipher::Cipher(int key, const string& s)
{
	D = key;
	S = ((s.size() - 1)/D + 1);
	value = new char * [S];
	for (int i = 0; i < S; i++) {
		value[i] = new char [D];
	}
}
string Cipher::encrypt(const string& open_text)
{

	for (int i=0; i < S; i++)
		for (int j=0; j < D; j++)
			value[i][j] = '*';
	for (int i = 0; i < open_text.size(); i ++)
		value[i/D][i%D] = open_text[i];
	string cipher_text;
	for (int i = D - 1; i >= 0; i --)
		for (int j = 0; j < S; j++)
			cipher_text = cipher_text + value[j][i];
	return cipher_text;
}
string Cipher::decrypt(const string& cipher_text)
{
	for (int i=0; i < S; i++)
		for (int j=0; j < D; j++)
			value[i][j] = '*';
	for (int i = 0; i < cipher_text.size(); i ++)
		value[i%S][i/S] = cipher_text[i];
	string open_text;
	for (int i = 0; i < S; i ++)
		for (int j = D - 1; j >= 0; j--)
			open_text = open_text + value[i][j];
	return open_text;
}
Cipher::~Cipher()
{
	for (int i = 0; i < S; i++) {
	
		delete [] value[i];
	}
	delete [] value;
}
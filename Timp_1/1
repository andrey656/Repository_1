Главный модуль программы:
#include <iostream>
#include <cctype>
#include <codecvt>
#include <locale>
#include "modAlphaCipher.h"
using namespace std;
bool isValid(const string& s)
{
	locale loc("ru_RU.UTF-8");
	wstring_convert<codecvt_utf8<wchar_t>, wchar_t>codec;
	wstring ws = codec.from_bytes(s);
	for(auto wc:ws)
		if (!isalpha(wc,loc) || !isupper(wc,loc))
			return false;
	return true;
}
int main(int argc, char **argv)
{
	string key;
	string text;
	unsigned op;
	cout<<"Введите ключ: ";
	cin>>key;
	if (!isValid(key)) {
		cerr<<"Ключ не принят"<<endl;
		return 1;
	}
	cout<<"Ключ принят"<< endl;
	modAlphaCipher cipher(key);
	do {
		cout<<"Введите операцию (0-выход,1-Зашифровка, 2-Расшифровка): ";

		cin>>op;
		if (op > 2) {
			cout<<"Illegal operation"<<endl;
		} else if (op >0) {
			cout<<"Введите текст: ";
			cin>>text;
			if (isValid(text)) {
				if (op==1) {
					cout<<"Зашифрованный текст:"<<cipher.encrypt(text)<<endl;
				} else {
					cout<<"Расшифрованный текст:"<< cipher.decrypt(text)<<endl;
				}
			} else {
				cout<<"Операция не удалась: неверный формат текста" << endl;
			}
		}
	} while (op!=0);
	return 0;
}

Модифицированный модуль "шифратора":
#include "modAlphaCipher.h"
using namespace std;
modAlphaCipher::modAlphaCipher(const string& skey)
{
	for (unsigned i=0; i<numAlpha.size(); i++) {
		alphaNum[numAlpha[i]]=i;
	}
	wstring wskey = towstr(skey);
	key = convert(wskey);
}
string modAlphaCipher::encrypt(const string& open_text)
{
	wstring open_wtext = towstr (open_text);
	vector<int> work = convert(open_wtext);
	for(unsigned i=0; i < work.size(); i++) {
		work[i] = (work[i] + key[i % key.size()]) % alphaNum.size();
	}
	return convert(work);
}
string modAlphaCipher::decrypt(const string&cipher_text)
{
	wstring cipher_wtext = towstr (cipher_text);
	vector<int> work = convert(cipher_wtext);
	for(unsigned i=0; i < work.size(); i++) {
		work[i] = (work[i] + alphaNum.size() - key[i %key.size()]) % alphaNum.size();
	}
	return convert(work);
}
inline vector<int> modAlphaCipher::convert(const wstring& ws)
{
	vector<int> result;
	for(auto wc:ws) {
		result.push_back(alphaNum[wc]);
	}
	return result;
}
inline string modAlphaCipher::convert(const vector<int>& v)
{
	wstring wresult;
	for(auto i:v) {
		wresult.push_back(numAlpha[i]);
	}
	string result = fromwstr(wresult);
	return result;
}
wstring modAlphaCipher::towstr(const string& s)
{
	locale loc("ru_RU.UTF-8");
	wstring_convert<codecvt_utf8<wchar_t>,wchar_t> codec;
	wstring ws = codec.from_bytes(s);
	return ws;
}
string modAlphaCipher::fromwstr(const wstring&ws)
{
	locale loc("ru_RU.UTF-8");
	wstring_convert<codecvt_utf8<wchar_t>,
	    wchar_t> codec;
	std::string s = codec.to_bytes(ws);
	return s;
}
Заголовочный файл модифицированного модуля:
#pragma once
#include <vector>
#include <string>
#include <codecvt>
#include <locale>
#include <map>
using namespace std;
class modAlphaCipher
{
private:
	wstring numAlpha = L"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	map <wchar_t,int> alphaNum;
	vector <int> key;
	vector<int> convert(const wstring& ws);
	string convert(const vector<int>& v);
	wstring towstr(const string& s);
	string fromwstr(const wstring& ws);
public:
	modAlphaCipher()=delete;
	modAlphaCipher(const string& skey);
	string encrypt(const string& open_text);
	string decrypt(const string& cipher_text);
};